Kubernetes Cluster Setup (v1.27.1)
sudo -i               to go for root
hostnamectl set-hostname master1
bash                               to use this command  go to master1 user
ip -br a

sudo nano /etc/hosts

ip master
ip worker



sudo apt-get update && apt-get upgrade -y
########################################################################################################
Load the Kernel modules on all the nodes

sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

########################################################################################################
Set the following Kernel params for K8s

sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
########################################################################################################

Reload the system changes
sudo sysctl --system

########################################################################################################
Install containerd run time

sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

sudo apt update
sudo apt install -y containerd.io

#####################################################################################################
Configure containerd using systemd as cgroup

containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1

sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

sudo systemctl restart containerd
sudo systemctl enable containerd

###################################################################################################
Add apt repository for k8s

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"



sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

kubeadm init 

after the above command  executed it will show three commands 
and after the if tou are root user you can run 1 extra command if you need it 

kubectl get nodes

kubectl get pods -A


##################################################################################################
Install Pod Network addon:

curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico.yaml -O

ls
result shown down 
calico.yml   snap 


kubectl create -f calico.yaml



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

worker node


then go to worker node 
if you are not root  use sudo -i

 use this in root command inhostnamectl  set-hostname worker

hostnamectl set-hostname worker1
 
 after creating the worker node user  then switch to worker node we can use         bash

to check ip adress ip -br a

after that add ip adress in localhost

sudo nano  /etc/hosts

worker ip adress
master ip adress



after that we add worker ip adress in master /etc/hosts/

ip adress master 
ip adress worker

:wq!

 sudo apt-get update && apt-get upgrade -y
 
sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF


sudo modprobe overlay

sudo modprobe br_netfilter

sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF


sudo sysctl --system

sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

sudo apt update
sudo apt install -y containerd.io

containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1

sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

sudo systemctl restart containerd
sudo systemctl enable containerd

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"



sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
systemctl restart containerd 
systemctl restart kubelet

after the above command go to master server  copy the kubeadm join token   and excute in workernode server 


then go to master server 


kubectl get pods  -A -W

kubectl get nodes 


kubectl create deployment   ownname --image=nginx

the result wil shown as deployment .apps/ownname  created
kubectl get pods
kubctl get pods  -o wide 


















reset 

1 Drain and Remove Node:

Before resetting, drain the worker node and remove it from the cluster. Run the following commands:

kubectl drain <node-name> --delete-local-data --force --ignore-daemonsets
kubectl delete node <node-name>


Replace <node-name> with the actual name of the worker node you want to drain and remove.

2 Reset the Node:

Run the following command on the worker node:

sudo kubeadm reset -f

The -f flag is used to force the reset without prompting for confirmation.

3 Remove CNI (Container Network Interface) Plugins:

Remove the CNI plugins that were installed during the kubeadm init process. The specific command depends on the CNI plugin used. For example, if you used Calico:

sudo rm -rf /etc/cni/net.d

4 Remove kubelet Configuration:

Remove the kubelet configuration:

sudo rm -rf /var/lib/kubelet

5 Remove Kubectl Configuration:

Remove the kubectl configuration file:

rm -rf $HOME/.kube

6 Restart the Node:

After running these commands, restart the worker node to ensure that all changes take effect:

sudo reboot




Optional: Clean Up iptables Rules:
If you encounter network-related issues after the reset, you may need to clean up iptables rules:

sudo iptables -F && sudo iptables -t nat -F && sudo iptables -t mangle -F && sudo iptables -X


This step is usually necessary only if you face networking issues after the reset.

After resetting the worker node, you can join it back to the Kubernetes cluster using the kubeadm join command. You'll obtain the necessary token and hash from the kubeadm init command output on the master node.

kubeadm join <master-node-ip>:<master-node-port> --token <token> --discovery-token-ca-cert-hash <hash>



Replace <master-node-ip>, <master-node-port>, <token>, and <hash> with the values obtained during the kubeadm init process on the master node.
