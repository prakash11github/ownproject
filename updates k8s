
Kubernetes installation process

sudo -i               to go for root
hostnamectl set-hostname master1
bash                               to use this command  go to master1 user
ip -br a

sudo nano /etc/hosts

10.0.0.2      master1.maas  master1
10.0.0.3      worker1.maas  worker1

Step 2: Disable swap
swapoff -a   
# Also edit /etc/fstab and comment swap partition entry 
# to avoid enable swap after reboot
Step 3: Set up Forwarding IPv4 and letting iptables see bridged traffic
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboot

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot

sudo sysctl --system

Step4: Uninstall old versions
Run the following command to uninstall all conflicting packages:
apt-get might report that you have none of these packages installed.
for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done
apt-get might report that you have none of these packages installed.
Images, containers, volumes, and networks stored in /var/lib/docker/ aren't automatically removed when you uninstall Docker. If you want to start with a clean installation, and prefer to clean up any existing data, read the uninstall Docker Engine section.
Installation methods
Install using the Apt repository
Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.
1.	Set up Docker's Apt repository. # Add Docker's official GPG key:
2.	sudo apt-get update
3.	sudo apt-get install ca-certificates curl gnupg
4.	sudo install -m 0755 -d /etc/apt/keyrings
5.	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
6.	sudo chmod a+r /etc/apt/keyrings/docker.gpg
7.	
8.	# Add the repository to Apt sources:
9.	echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
10.	sudo apt-get update
Install the Docker packages:
To install the latest version, run:
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
check that docker is installed or not
docker --version 

Installing kubeadm, kubelet and kubectl 

You will install these packages on all of your machines:
●	kubeadm: the command to bootstrap the cluster.
●	kubelet: the component that runs on all of the machines in your cluster and does things like starting pods and containers.
●	kubectl: the command line util to talk to your cluster.
Kubernetes package repositories
These instructions are for Kubernetes 1.28.
 
Update the apt package index and install packages needed to use the Kubernetes apt repository:

sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl
Download the public signing key for the Kubernetes package repositories. The same signing key is used for all repositories so you can disregard the version in the URL:

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
Add the appropriate Kubernetes apt repository:

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
Update the apt package index, install kubelet, kubeadm and kubectl, and pin their version:

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


Set the cgroup driver for runc to systemd required for the kubelet
sudo mkdir /etc/containerd
sudo sh -c 'sudo containerd config default > /etc/containerd/config.toml'
sudo sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl restart kubelet

Initialize k8s cluster with user defined network (Network must be /16, and must NOT match underlying LAN CIDR)
sudo kubeadm config images pull                    --for worker still hear to end and add token from master to workernode  then go to master  kubectl get nodes then we can see the workernode 
sudo kubeadm init --pod-network-cidr=192.168.0.0/16

Setup kubectl for user on master node
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Setup Calico SDN
if pod network in "kubeadm init" is not =192.168.0.0/16, then edit downloaded custom-resources.yaml file accordingly (edit cidr= entry, default is 192.168.0.0/16)
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml
curl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O
kubectl create -f custom-resources.yaml

 Join worker node(s)
kubeadm join 10.0.0.2:6443 --token ndi3ae.ujwfcuais8zm2cyn --discovery-token-ca-cert-hash sha256:fc6c1094159833bf95a3fcb7d49960026e4ddad56f8648b94240cd1c867b2f6b
(Optional): If you need to generate token for kubeadm join command
Sudo kubeadm token create --print-join-command
Watch till all CNI related pods are up and running
watch -n5 kubectl get po -A





